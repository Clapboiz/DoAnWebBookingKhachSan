TODAY: 
    Hotel detail site (2h) @Current
        components: 
            Ten khach san 
            Button: dat can ho 
            Dia chi 
            Danh gia: 
                diem 
                text: danh gia 
                so luong danh gia 
            Anh: 
                1 Anh lon ben phai 
                2 Anh nho ben trai  
                list anh khac ben duoi 

            Box tim phong ben trai: @Later 
            Hien thi tren ban do @Later

    Add Register api (2h) 
        -> Add the given user to the database 
            check if the user already exist as well 
        PASSWORD HASHING @Later

    Add register client code (1h) @Halfway
        -> Have the register ui in place [X]
        -> Need: 
            role buttons: [X]
            + customer 
            + hotel manager  
        -> React to success/fail register result from server []
    
    Create upload hotel api (2h) [] 
        Dang cho nghi cua quy vi 

    Create upload hotel front-end (2h) [] 

TODO: 
    https://docs.zalopay.vn/v2/general/overview.html
    Payment Service (4h) []
        ZaloPay 
    Refund Service (4h) []

    Show places on uses google map api (4h) []

    Report final: 
        + Overview System 
        + Introduction 
        + Features (Base + Advance)
        + Results + Demo 

    Add Database operations to the authentication server code (1h) 
        -> Create User Model 
        -> With 3 opertions:
            + check if user exist 
            + add user 
            + 
        -> Create Refresh Token model: ?? 
            storing refresh token along with user id

    Show the search result on to the page (2h) @Halfway 
        -> still need:
            price
            thumbnail 

    Handle login on the clientside (2h) @Halfway 
        -> half way there 
        -> need:
            + some login information
            + logout feature (calling api)


    Add authorization middleware (2h) 
        role based 
        -> maybe trying to find the old code that i wrote before 

    Payment API (4h) 

    Learn how Sequence Diagram works (1h) [] 
    Wrap the development environment in Docker (4h) [] @Maybe

    <insert a Sequence Diagram for clearer> (2h)
        -> How the API flow gonna works: 
            1. User call to route 
            2. route call controller 
            3. controller calls 'model'(the data part) and 'service'(the logic part) -> get the result back 
            4. controller return the result back to the view  

        Init project: 
            Understand Sequelize (2h) []
            Setup folder structure (2h) []
            Init Development Rules (1h) []
                -> Where to put things ? 

            Setup Development Environment Specs (2h) []
                -> Database Software
                    -> Connection port 
                -> Node version


DONE:  
    Redesign the low level design from the reference image (1h) 
    API stub:     
        Search for hotels (1h) [X] 
        Return hotel details (1h) [X] 
    Understand Sequelize (2h) [X] 
    Scraping data (4h) [X] 
    Connect front-end and back-end with a simple message: (2h) [X] 
        “Hello Backend” from React front-end
        “Hello React” from Express back-end

    Wrap the development environment in Docker (4h) @Later
        -> learn how Docker works 
            -> Can use bind mount to mount the source code to local dev environment 

    Init the database to make it works (1h) [X] 
    Setup folder structure (2h) [X]
    -> Init Development Rules (1h) [X] 
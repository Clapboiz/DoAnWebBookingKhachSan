TODAY: 
    Writing the Correct web LAYOUT using bootstrap (4h) []
        List of sites to fix: 
            + ...

    TESTING SOME ACORN DEPLOYMENT (2h) [X]
        -> I think we can do it :)) 

    Tich hop money transaction code to our websites, for starter (2h) [] @Halfway  
        After we done this

    learn how to use acorn for hosting random things (2h) [] 
        -> sharing docker images (30p) 
        -> reading and try some acorn thingy (1h30)
        docker build -t <reponame> 
        docker push reponame
    
    BIG CHANGE: 
        we currently using 
            money transaction api:
                vnpay 
                -> HOSTING ON ACORN as well (for TESTING at least) 
            map api:
                goong 

            **Mode of map show: 
                Search page map 
                    little map: 
                        ** It's just a button (hien thi tren ban do) on top of  
                        a IMAGE of a map of that area 

                    big map: 
                        -> show all the search list markers on the map but bigger size :v 
                        It's a MODAL on top
                        with infos: 
                            + the hotel list on the left 
                                + HOVER on one of the hotel the marker on the map DO SOME ANIMATION
                            + The map on the right 
                        
                Detail page map 
                    little map: 
                        -> show a closer view with actual marker of the place HIGHLIGHTED 
                    big map: 
                        It's a MODAL on top
                        with infos: 
                            + the hotel information on the left is a modal 
                            on top of the map as a background 
                            + each marker have their price on the right 

                Operation/Methods needed: 
                    + Show a map with different size [X] -> change width, height
                    + Draw a maker at a a position [X] -> Change Pin
                    + Marker Animation [] @Later 
                    + Change Color [X]

    -> We have a 5 days left 
        -> Done all of these features in manner of days 
        -> We're gonna spend 1 day for deployment stuff ?? 

    Big API features: 
        Map Services: 
            Show places on uses Goong Map Api (4h) [] 
                -> Pin a single marker  on the map (1h) [] 
                -> Pin multiple markers  on the map (1h) [] 
                -> Return a position from an address (1h) [] 
                -> Have a good looking marker icon (10p) [] @Later 

        Image Hosting service - cloudinary (4h) [] 
            NOTES: 
                should we just convert the image to base64 on the client 
                then send to the server
                then the server will again send that to the image hosting services 

            Features: 
                -> Get the image using it's url (1h) [] 

                Backend: 
                    write an image storing api   

            NOTE: 
                the server is the one who actually send the image to the cloudinary storage 
                -> server: get the image from the client then send it to cloudinary 
                -> client: only get the image from the url 

            Our database will only store the url/id of the image 

    Try to do DATABASE RELATED THINGS (2h) [] @ASAP, bottleneck
        -> note some migration script for easier to use [] 

    The hotel detail api and the front end code is NOT 100% COMPATIBLE []  
        -> Need to change and migrate the hotel table @Next 
            + there should be more reviews @DatabaseRelated 
                -> create a new table 
            + the images not working -> should be more images as well @DatabaseRelated
                -> create a new table 

    Add Register api (2h) 
        -> Add the given user to the database @DatabaseRelated
            check if the user already exist as well 
        PASSWORD HASHING @Later

    Add Database operations to the authentication server code (1h) 
        -> Create User Model 
        -> With 3 opertions:
            + check if user exist 
            + add user 
            + 
        -> Create Refresh Token model: ?? @DatabaseRelated
            storing refresh token along with user id







    Create upload hotel front-end (2h) [X] 
        -> How image upload works ?? @Next 
        -> Connect this site to the original front-end routing system (1h) []

    Create upload hotel api (2h) [] 
        Dang cho nghi cua quy vi 
        -> get the actual information 
            -> along with the images


    Comment component (1h): @Later 
    Comment api (2h): @Later 

    Booking front-end (2h): 
        components: 
            .... 

    Booking api (2h): 

    View-Booking api (2h): 


    Hotel detail site (2h) @Halfway 
        components: [X]
            Ten khach san 
            Button: dat can ho 
            Dia chi 
            Danh gia: 
                diem 
                text: danh gia 
                so luong danh gia 
            Anh: 
                1 Anh lon ben phai 
                2 Anh nho ben trai  
                list anh khac ben duoi 
            Box tim phong ben trai: @Later 
            Hien thi tren ban do @Later

        -> Connect this site to the original front-end routing system (1h) []


    Add register client code (1h) @Halfway
        -> Have the register ui in place [X]
        -> Need: 
            role buttons: [X]
            + customer 
            + hotel manager  
        -> React to success/fail register result from server []

TODO: 
    Report final: 
        + Overview System 
        + Introduction 
        + Features (Base + Advance)
        + Results + Demo 


    Show the search result on to the page (2h) @Halfway 
        -> still need:
            price
            thumbnail 

    Handle login on the clientside (2h) @Halfway 
        -> half way there 
        -> need:
            + some login information
            + logout feature (calling api)


    Add authorization middleware (2h) 
        role based 
        -> maybe trying to find the old code that i wrote before 

    Payment API (4h) 

    Learn how Sequence Diagram works (1h) [] 
    Wrap the development environment in Docker (4h) [] @Maybe

    <insert a Sequence Diagram for clearer> (2h)
        -> How the API flow gonna works: 
            1. User call to route 
            2. route call controller 
            3. controller calls 'model'(the data part) and 'service'(the logic part) -> get the result back 
            4. controller return the result back to the view  

        Init project: 
            Understand Sequelize (2h) []
            Setup folder structure (2h) []
            Init Development Rules (1h) []
                -> Where to put things ? 

            Setup Development Environment Specs (2h) []
                -> Database Software
                    -> Connection port 
                -> Node version


DONE:  
    // TODO: Backend: upload the images to the cloudinary server [X]
    HTML View-Booking front-end: [X]
        nhieu tab giong tab shopee
        + customer:  
            list of bookings TAB 
                Ten khach san 
                Thong tin phong
                Gia phong 
                Thanh tien 
                Liên hệ người cho thuê
                Thong tin ngay den ngay di, member count 
                Hủy phòng

        + hotel manager: 
            list of bookings TAB 
                the same upper 
            booked places TAB 
                Thong tin phong
                Gia phong 
                Thanh tien 
                Liên hệ người thuê
                Thông tin người thuê
                Thong tin ngay den ngay di, member count 

    Call the hotel details api on the front end [X]

    Redesign the low level design from the reference image (1h) 
    API stub:     
        Search for hotels (1h) [X] 
        Return hotel details (1h) [X] 
    Understand Sequelize (2h) [X] 
    Scraping data (4h) [X] 
    Connect front-end and back-end with a simple message: (2h) [X] 
        “Hello Backend” from React front-end
        “Hello React” from Express back-end

    Wrap the development environment in Docker (4h) @Later
        -> learn how Docker works 
            -> Can use bind mount to mount the source code to local dev environment 

    Init the database to make it works (1h) [X] 
    Setup folder structure (2h) [X]
    -> Init Development Rules (1h) [X] 